version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)"
        - "traefik.http.routers.traefik.service=api@internal"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-logs:/var/log/traefik
      - traefik-letsencrypt:/letsencrypt
      - traefik-certs:/etc/traefik/certs
    networks:
      - resume_network
    configs:
      - source: traefik_config
        target: /etc/traefik/traefik.yml
      - source: traefik_dynamic
        target: /etc/traefik/dynamic.yml

  portainer:
    image: portainer/portainer-ce:2.27.7
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.portainer.rule=Host(`portainer.yourdomain.com`)"
        - "traefik.http.routers.portainer.entrypoints=websecure"
        - "traefik.http.services.portainer.loadbalancer.server.port=9000"
        - "traefik.http.routers.portainer.tls.certresolver=myresolver"
        - "traefik.http.routers.portainer.tls=true"
    networks:
      - resume_network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    depends_on:
      - traefik

  postgres:
    image: postgres:15
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.db == true
    env_file:
      - ./backend/app/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - resume_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: sepehrmdn/resume-review/backend:latest
    deploy:
      replicas: 2
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.service=backend"
        - "traefik.http.routers.backend.rule=Host(`api.yourdomain.com`, `www.api.yourdomain.com`) && PathPrefix(`/`)"
        - "traefik.http.routers.backend.entrypoints=web"
        - "traefik.http.routers.backend.middlewares=backend-redirectscheme,backend-compress,cors-headers@file"
        - "traefik.http.services.backend.loadbalancer.server.port=8000"
        - "traefik.http.routers.backend-secure.rule=Host(`api.yourdomain.com`, `www.api.yourdomain.com`) && PathPrefix(`/`)"
        - "traefik.http.routers.backend-secure.entrypoints=websecure"
        - "traefik.http.routers.backend-secure.tls.certresolver=myresolver"
        - "traefik.http.routers.backend-secure.tls=true"
        - "traefik.http.routers.backend-secure.priority=40"
        - "traefik.http.routers.backend-secure.service=backend"
        - "traefik.http.middlewares.backend-compress.compress=true"
        - "traefik.http.middlewares.backend-ratelimit.ratelimit.average=100"
        - "traefik.http.middlewares.backend-redirectscheme.redirectscheme.scheme=https"
        - "traefik.http.middlewares.backend-redirectscheme.redirectscheme.permanent=true"
    env_file:
      - ./backend/app/.env
    environment:
      SQLALCHEMY_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    networks:
      - resume_network
    depends_on:
      - postgres

  frontend:
    image: sepehrmdn/resume-review/frontend:latest
    deploy:
      replicas: 2
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.service=frontend"
        - "traefik.http.routers.frontend.rule=Host(`yourdomain.com`) && PathPrefix(`/`)"
        - "traefik.http.routers.frontend.entrypoints=web"
        - "traefik.http.routers.frontend.middlewares=backend-redirectscheme,backend-compress,cors-headers@file"
        - "traefik.http.services.frontend.loadbalancer.server.port=8001"
        - "traefik.http.routers.frontend-secure.rule=Host(`yourdomain.com`) && PathPrefix(`/`)"
        - "traefik.http.routers.frontend-secure.entrypoints=websecure"
        - "traefik.http.routers.frontend-secure.tls.certresolver=myresolver"
        - "traefik.http.routers.frontend-secure.tls=true"
        - "traefik.http.routers.frontend-secure.priority=40"
        - "traefik.http.routers.frontend-secure.service=frontend"
        - "traefik.http.middlewares.frontend-compress.compress=true"
        - "traefik.http.middlewares.frontend-ratelimit.ratelimit.average=100"
        - "traefik.http.middlewares.frontend-redirectscheme.redirectscheme.scheme=https"
        - "traefik.http.middlewares.frontend-redirectscheme.redirectscheme.permanent=true"
    networks:
      - resume_network
    depends_on:
      - backend

  # Monitoring services (simplified for swarm)

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    environment:    # Please avoid hard coding env and passwords these are for the test purpose
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - ELASTIC_PASSWORD=elasticadmin1234
      - xpack.security.enabled=true
        #- xpack.security.http.ssl.enabled=true
        #- xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12
        #- xpack.security.http.ssl.truststore.path=/usr/share/elasticsearch/config/certs/elastic-certificates.p12

    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
        #- ./certs:/usr/share/elasticsearch/config/certs
    networks:
      - resume_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -k -u elastic:elasticadmin1234 http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'"
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.7.1
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.monitoring == true
    environment:
      - ELASTIC_PASSWORD=elasticadmin1234
    volumes:
      - logstash_pipeline:/usr/share/logstash/pipeline
    networks:
      - resume_network
    depends_on:
      - elasticsearch
    configs:
      - source: logstash_config
        target: /usr/share/logstash/pipeline/logstash.conf

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:7.17.15
    deploy:
      mode: global
    user: root
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys:/hostfs/sys:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - resume_network
    configs:
      - source: metricbeat_config
        target: /usr/share/metricbeat/metricbeat.yml

  grafana:
    image: grafana/grafana-oss:latest
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.yourdomain.com`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.http.routers.grafana.tls.certresolver=myresolver"
        - "traefik.http.middlewares.grafana-compress.compress=true"
        - "traefik.http.middlewares.grafana-ratelimit.ratelimit.average=5"
        - "traefik.http.routers.grafana.middlewares=grafana-compress,grafana-ratelimit"

    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - resume_network

configs:
  traefik_config:
    file: ./traefik/traefik.yml
  traefik_dynamic:
    file: ./traefik/dynamic.yml
  # traefik_htpasswd:   # Better to craete for storing Traefik secrets
  #   file: ./secrets/.htpasswd
  metricbeat_config:
    file: ./monitoring/metricbeat/metricbeat.yml
  logstash_config:
    file: ./monitoring/logstash/logstash.conf

volumes:
  postgres_data:
    external: true
  es_data:
    external: true
  grafana-data:
    external: true
  portainer_data:
    external: true
  traefik-logs:
    external: true
  traefik-letsencrypt:
    external: true
  traefik-certs:
    external: true
  logstash_pipeline:
    external: true
  grafana-provisioning:
    external: true

networks:
  resume_network:
    external: true
