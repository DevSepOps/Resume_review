version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: resume_postgres_prod
    env_file:
      - ./backend/app/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - resume_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: ${DOCKER_USERNAME}/resume-backend:latest
    container_name: resume_backend_prod
    env_file:
      - .env.production
    environment:
      SQLALCHEMY_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - resume_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.yourdomain.com`)"

  frontend:
    image: ${DOCKER_USERNAME}/resume-frontend:latest
    container_name: resume_frontend_prod
    depends_on:
      - backend
    networks:
      - resume_network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`yourdomain.com`)"

  nginx:
    image: nginx:alpine
    container_name: resume_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - resume_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  resume_network:
    driver: bridge