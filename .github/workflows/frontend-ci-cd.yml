name: Flet App CI

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
    tags:
      - 'v*' 
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'

  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract version from tag (if exists)
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "VERSION=none" >> $GITHUB_ENV
        fi

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.frontend
        push: false
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/resume-review/frontend:latest

    - name: Push Docker image with version tag
      if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/resume-review/frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/resume-review/frontend:${{ env.VERSION }}

    # - name: Deploy to remote host via SSH
    #   uses: appleboy/ssh-action@v0.1.10
    #   with:
    #     host: ${{ secrets.SSH_HOST }}
    #     username: ${{ secrets.SSH_USER }}
    #     password: ${{ secrets.SSH_PASS }}
    #     port: ${{ secrets.SSH_PORT }}
    #     script: |
    #       cd /app/
    #       docker stop frontend || true
    #       docker rm frontend || true
    #       docker rmi ${{ secrets.DOCKER_USERNAME }}/frontend:latest
    #       docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
    #       docker compose -f docker-compose.prod.yml --env-file ./backend/app/.env up -d --force-recreate frontend:latest 
